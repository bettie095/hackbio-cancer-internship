Contributors: Ajisegiri Sewedo, Salaam Ridwan, Adekoya Adepeju, Mansour Balqees, Otuekong Emmanuel, Abodunrin Elizabeth.
---
title: "Glioblastoma-Stage2"
output: html_document
date: "2024-09-14"
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

This is an R Markdown document. Markdown is a simple formatting syntax for authoring HTML, PDF, and MS Word documents. For more details on using R Markdown see <http://rmarkdown.rstudio.com>.

When you click the **Knit** button a document will be generated that includes both content as well as the output of any embedded R code chunks within the document. You can embed an R code chunk like this:

```{r, include=FALSE}
# Load necessary libraries
library(tidyverse)
library(DESeq2)
library(clusterProfiler)
library(org.Hs.eg.db)
library(gplots)
library(viridis)
library(org.Hs.eg.db)
library(AnnotationDbi)
```

##  Load the data

Load the Glioblastoma data Directly from this URL : https://raw.githubusercontent.com/HackBio-Internship/public_datasets/main/Cancer2024/glioblastoma.csv

```{r}
# Load and manipulate the data
gene_data <- read_csv("/home/admin/gene_data.csv")
gene_data <- as.data.frame(gene_data)
rownames(gene_data) <- gene_data$symbols
gene_data <- gene_data[,-11]

```


## Create sample info dataframe for DESEq2 running step
```{r}
sample_info <- data.frame(
  SampleID = colnames(gene_data),
  tissue_type = sapply(colnames(gene_data), function(barcode) {
    sample_type <- substr(barcode, 14, 15)
    switch(sample_type,
           "01" = "Solid Tissue Normal",
           "02" = "Primary Tumor",
           "06" = "Metastatic",
           "11" = "Solid Tissue Normal",
           "12" = "Primary Blood Derived Cancer",
           "14" = "Primary Blood Derived Cancer",
           "Unknown")
  })
)
```

# The first 6 rows from sample_info data frame
```{r}
print(head(sample_info))

```
# This code creates a gene expression heatmap using the heatmap.2 function, visualizing all samples across genes. It applies col-wise scaling, uses a custom color palette, and includes various customizations for improved readability, such as rotated column labels, adjusted margins, and a color key representing Z-scores.
```{r, fig.width=12, fig.height=14}
heatmap.2(as.matrix(gene_data), # or use gene_data_subset if subsetting
          scale = "row",
          col = colorRampPalette(c("#053061", "#2166AC", "#4393C3", "#92C5DE", "#D1E5F0",
                                   "#F7F7F7", "#FDDBC7", "#F4A582", "#D6604D", "#B2182B", "#67001F"))(100),
          trace = "none",
          dendrogram = "col",
          main = "Gene Expression Heatmap - by Genes",
          xlab = "Samples",
          ylab = "Genes",
          margins = c(5, 5),
          cexRow = 0.6,
          cexCol = 0.7,
          srtCol = 45,
          adjCol = c(1,1),
          keysize = 1,
          key.title = "Expression",
          key.xlab = "Z-score",
          density.info = "none",
          colsep = 1:ncol(gene_data),
          sepcolor = "white",
          sepwidth = c(0.01, 0.01),
          lhei = c(1, 8),
          lwid = c(1, 8))

```
# This code creates a gene expression heatmap using the heatmap.2 function, visualizing all genes across samples. It applies row-wise scaling, uses a custom color palette, and includes various customizations for improved readability, such as rotated column labels, adjusted margins, and a color key representing Z-scores.

```{r, fig.width=12, fig.height=14}

# Optional: Subset data if needed
# top_genes <- head(order(rowVars(as.matrix(gene_data)), decreasing=TRUE), 1000)
# gene_data_subset <- gene_data[top_genes,]

heatmap.2(as.matrix(gene_data), # or use gene_data_subset if subsetting
          scale = "row",
          col = colorRampPalette(c("#053061", "#2166AC", "#4393C3", "#92C5DE", "#D1E5F0",
                                   "#F7F7F7", "#FDDBC7", "#F4A582", "#D6604D", "#B2182B", "#67001F"))(100),
          trace = "none",
          dendrogram = "row",
          main = "Gene Expression Heatmap - by Genes",
          xlab = "Samples",
          ylab = "Genes",
          margins = c(5, 5),
          cexRow = 0.6,
          cexCol = 0.7,
          srtCol = 45,
          adjCol = c(1,1),
          keysize = 1,
          key.title = "Expression",
          key.xlab = "Z-score",
          density.info = "none",
          colsep = 1:ncol(gene_data),
          sepcolor = "white",
          sepwidth = c(0.01, 0.01),
          lhei = c(1, 8),
          lwid = c(1, 8))

```
# This code creates a gene expression heatmap using the heatmap.2 function, visualizing all genes across samples. It applies both-wise scaling, uses a custom color palette, and includes various customizations for improved readability, such as rotated column labels, adjusted margins, and a color key representing Z-scores.

```{r, fig.width=12, fig.height=14}

# Optional: Subset data if needed
# top_genes <- head(order(rowVars(as.matrix(gene_data)), decreasing=TRUE), 1000)
# gene_data_subset <- gene_data[top_genes,]

heatmap.2(as.matrix(gene_data), # or use gene_data_subset if subsetting
          scale = "row",
          col = colorRampPalette(c("#053061", "#2166AC", "#4393C3", "#92C5DE", "#D1E5F0",
                                   "#F7F7F7", "#FDDBC7", "#F4A582", "#D6604D", "#B2182B", "#67001F"))(100),
          trace = "none",
          dendrogram = "both",
          main = "Gene Expression Heatmap - Both",
          xlab = "Samples",
          ylab = "Genes",
          margins = c(5, 5),
          cexRow = 0.6,
          cexCol = 0.7,
          srtCol = 45,
          adjCol = c(1,1),
          keysize = 1,
          key.title = "Expression",
          key.xlab = "Z-score",
          density.info = "none",
          colsep = 1:ncol(gene_data),
          sepcolor = "white",
          sepwidth = c(0.01, 0.01),
          lhei = c(1, 8),
          lwid = c(1, 8))

```
## This code performs differential expression analysis using DESeq2, including data preparation, pre-filtering, and running the DESeq algorithm. The results are then filtered to identify statistically significant (padj < 0.05) and biologically relevant (|log2FoldChange| > 2) differentially expressed genes, prioritizing those with the largest expression changes.

```{r}
## DESeq2 Analysis

# Create DESeqDataSet object
dds <- DESeqDataSetFromMatrix(countData = round(gene_data),
                              colData = sample_info,
                              design = ~ tissue_type)

# Pre-filtering
dds <- dds[rowSums(counts(dds)) >= 10, ]

# Set factor levels
dds$tissue_type <- relevel(dds$tissue_type, ref = "Solid Tissue Normal")

# Run DESeq
dds <- DESeq(dds)
res <- results(dds)

# Filter results
res_filtered <- res %>%
  as.data.frame() %>%
  filter(!is.na(padj), !is.na(log2FoldChange), padj < 0.05, abs(log2FoldChange) > 2) %>%
  arrange(desc(abs(log2FoldChange)))
significant_genes <- res_filtered
gene_list <- rownames(significant_genes)

# Convert gene symbols to Entrez IDs
gene_symbols <- rownames(significant_genes)
gene_list <- bitr(gene_symbols, fromType = "SYMBOL", toType = "ENTREZID", OrgDb = org.Hs.eg.db)

# Filter out any NA values that may result from conversion
gene_list <- gene_list[!is.na(gene_list$ENTREZID), "ENTREZID"]

ekegg <- enrichKEGG(gene         = gene_list,
                    organism     = 'hsa', # Human
                    pvalueCutoff = 0.05)
barplot(ekegg, showCategory = 5)


ekegg_df <- as.data.frame(ekegg@result)

# Assuming 'Count' and 'GeneRatio' are columns in your data frame
ekegg_df$RichFactor <- ekegg_df$Count / as.numeric(sapply(strsplit(ekegg_df$GeneRatio, "/"), `[`, 2))

# Create a lollipop plot using the calculated RichFactor
ggplot(ekegg_df[1:5, ], aes(x = RichFactor, y = fct_reorder(Description, RichFactor))) +
  geom_segment(aes(xend = 0, yend = Description)) +
  geom_point(aes(color = p.adjust, size = Count)) +
  scale_color_gradientn(colours = c("#f7ca64", "#46bac2", "#7e62a3"), trans = "log10") +
  scale_size_continuous(range = c(2, 10)) +
  theme_minimal() +
  xlab("Rich Factor") +
  ylab(NULL) +
  ggtitle("KEGG Enrichment Lollipop Plot")
```

```{r}
# subset the upregulated genes from res_filtered object 
# Order by log2FoldChange
res_upregulated <- res_filtered[order(res_filtered$log2FoldChange, decreasing = TRUE),]

# Select top 18 upregulated genes
top_upregulated <- head(res_upregulated, 10)

# Extract normalized counts for these genes
normalized_counts <- counts(dds, normalized=TRUE)[rownames(top_upregulated),]

# Prepare data for plotting
plot_data <- normalized_counts %>%
  as.data.frame() %>%
  rownames_to_column("gene") %>%
  pivot_longer(cols = -gene, names_to = "sample", values_to = "count") %>%
  left_join(sample_info, by = c("sample" = "SampleID"))

# Add log2FoldChange and padj values
plot_data <- plot_data %>%
  left_join(as.data.frame(res_filtered) %>% 
              rownames_to_column("gene") %>%
              dplyr::select(gene, log2FoldChange, padj),
            by = "gene")
# Create the plot without points
ggplot(plot_data, aes(x = tissue_type, y = log2(count + 1), fill = tissue_type)) +
  geom_boxplot(outlier.shape = NA) +
  facet_wrap(~ gene, scales = "free_y", ncol = 6) +
  scale_fill_manual(values = c("Solid Tissue Normal" = "lightblue", "Primary Tumor" = "darkblue")) +
  labs(y = "log2CPM", x = NULL) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        strip.background = element_blank(),
        strip.text = element_text(face = "bold"),
        legend.position = "none") +
  geom_text(data = plot_data %>% group_by(gene) %>% slice(1),
            aes(x = tissue_type, y = Inf, label = sprintf("q = %.2e", padj)),
            vjust = 1.5, size = 3, inherit.aes = FALSE)

```

```{r}
# subset the upregulated genes from res_filtered object 
# Order by log2FoldChange
res_downregulated <- res_filtered[order(res_filtered$log2FoldChange, decreasing = FALSE),]

# Select top 18 upregulated genes
top_downregulated <- head(res_downregulated, 10)

# Extract normalized counts for these genes
normalized_counts_down <- counts(dds, normalized=TRUE)[rownames(top_downregulated),]

# Prepare data for plotting
plot_data <- normalized_counts_down %>%
  as.data.frame() %>%
  rownames_to_column("gene") %>%
  pivot_longer(cols = -gene, names_to = "sample", values_to = "count") %>%
  left_join(sample_info, by = c("sample" = "SampleID"))

# Add log2FoldChange and padj values
plot_data <- plot_data %>%
  left_join(as.data.frame(res_filtered) %>% 
              rownames_to_column("gene") %>%
              dplyr::select(gene, log2FoldChange, padj),
            by = "gene")
# Create the plot without points
ggplot(plot_data, aes(x = tissue_type, y = log2(count + 1), fill = tissue_type)) +
  geom_boxplot(outlier.shape = NA) +
  facet_wrap(~ gene, scales = "free_y", ncol = 6) +
  scale_fill_manual(values = c("Solid Tissue Normal" = "lightblue", "Primary Tumor" = "darkblue")) +
  labs(y = "log2CPM", x = NULL) +
  theme_bw() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        strip.background = element_blank(),
        strip.text = element_text(face = "bold"),
        legend.position = "none") +
  geom_text(data = plot_data %>% group_by(gene) %>% slice(1),
            aes(x = tissue_type, y = Inf, label = sprintf("q = %.2e", padj)),
            vjust = 1.5, size = 3, inherit.aes = FALSE)

```
